def qualityGateValidation(qg){
  if(qg.status != 'OK')
  {
    return true
  }
  return false
}
pipeline {
    agent any
    environment {
        gitcommit = "${gitcommit}"
    }
    tools {
        maven 'mavenJenkins'
    }

    stages {

        stage('VerificaciÃ³n SCM') {
          steps {
            script {
              checkout scm
              sh "git rev-parse --short HEAD > .git/commit-id"  
              gitcommit = readFile('.git/commit-id').trim()
            }
          }  
        }
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }    
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Sonarqube') {
            environment {
                scannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
            }
            steps {
                withSonarQubeEnv('sonarQubeInt') {
                   withCredentials([string(credentialsId: 'sonar', variable: 'sonarLogin')]) {
                      sh "${scannerHome}/bin/sonar-scanner -e -Dsonar.host.url=http://localhost:9000 -Dsonar.login=${sonarLogin} -Dsonar.projectName=simple-java-maven-app -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.projectKey=SJMA -Dsonar.sources=src/main/ -Dsonar.tests=src/test/ -Dsonar.language=java -Dsonar.java.binaries=."
                   }
                }
                timeout(time: 3, unit: 'MINUTES') {
                    //waitForQualityGate abortPipeline: true
                    waitForQualityGate abortPipeline: qualityGateValidation(waitForQualityGate())
                }
            }
        } 
        stage('Docker Build & Push') {
          steps {
            script {  
              docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-pipelines') {
                def appmavenjenkins = docker.build("danst21/mavenjenkins:${gitcommit}", ".")
                appmavenjenkins.push()
              }
            }  
          }  
        }
        stage('Deploy') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
    }
    post {
        success { 
            slackSend message: "Build Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
        failure {
            slackSend message: "Build Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
        always {
            slackSend message: "Build Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }    
    }
}
